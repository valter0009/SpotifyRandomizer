@page "/"
@inject NavigationManager navManager
@using SpotifyAPI.Web
@using SpotifyBlazorSrvr.Services
@inject AuthService AuthService
@inject SpotifyService SpotifyService

<div class="full-height-container text-white">
    @if (AuthService.IsAuthed)
    {
        <div class="text-center song-container">
            <div class="song-window">
                @if (isLoading)
                {
                    <div class="loading-spinner-container">
                        <div class="spinner-border text-light" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (_track != null)
                {
                    <h3>@_track.Name</h3>
                    <p>By @string.Join(", ", _track.Artists.Select(a => a.Name))</p>
                    <p>Album: @_track.Album.Name</p>
                    <img src="@_track.Album.Images[0].Url" alt="Album cover" class="img-fluid img-thumbnail w-50">
                    <div>
                        <a href="@_track.Uri" class="small-btn-green text-decoration-none mt-5">
                            Listen on Spotify
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-spotify ms-1" viewBox="0 0 16 16">
                                <path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0m3.669 11.538a.5.5 0 0 1-.686.165c-1.879-1.147-4.243-1.407-7.028-.77a.499.499 0 0 1-.222-.973c3.048-.696 5.662-.397 7.77.892a.5.5 0 0 1 .166.686m.979-2.178a.624.624 0 0 1-.858.205c-2.15-1.321-5.428-1.704-7.972-.932a.625.625 0 0 1-.362-1.194c2.905-.881 6.517-.454 8.986 1.063a.624.624 0 0 1 .206.858m.084-2.268C10.154 5.56 5.9 5.419 3.438 6.166a.748.748 0 1 1-.434-1.432c2.825-.857 7.523-.692 10.492 1.07a.747.747 0 1 1-.764 1.288" />
                            </svg>
                        </a>
                    </div>
                }
                else
                {
                    <p>No track found. Try again.</p>
                }
            </div>
        </div>
        <button @onclick="GetRandomTrack" disabled="@(!canRequestNewTrack || isLoading)" class="small-btn-black mb-5">New random track</button>
    }
    else
    {
        <div class="text-center login-container">
            <div class="login">
                <h1>Unpredictify</h1>
                <h6 class="mt-4 mb-5">Venture into the Spotify abyss and discover artists and music you never knew existed.</h6>
                <a href="@AuthService._authUri" class="big-btn text-decoration-none">Login to proceed</a>
            </div>
        </div>
    }
</div>


@code {
    private FullTrack? _track;
    private System.Timers.Timer? cooldownTimer;
    private bool canRequestNewTrack = true;
    private bool isLoading = false; 

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AuthService.CreateLoginUri();
        AuthService.OnAuthenticationChanged += StateHasChanged;

        cooldownTimer = new System.Timers.Timer(1000) { AutoReset = false };
        cooldownTimer.Elapsed += (sender, args) =>
        {
            InvokeAsync(() =>
            {
                canRequestNewTrack = true;
                StateHasChanged();
            });
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AuthService.GetAccessToken();
    }

    public void Dispose()
    {
        AuthService.OnAuthenticationChanged -= StateHasChanged;
        cooldownTimer?.Dispose();
    }

    private async Task GetRandomTrack()
    {
        if (!canRequestNewTrack || isLoading) return;

        isLoading = true; 
        StateHasChanged();
        cooldownTimer?.Start();
        int retryCount = 0;
        int maxRetries = 3;
        do
        {
            _track = await SpotifyService.GetRandomTrackAsync();
            retryCount++;
        }
        while ((_track == null || string.IsNullOrEmpty(_track.Name)) && retryCount < maxRetries);

        isLoading = false; 
        StateHasChanged(); 
    }
}
